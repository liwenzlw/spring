<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans.xsd"
    default-lazy-init="true"
>

    <!--
        By default, ApplicationContext implementations eagerly create and configure all singleton beans
        as part of the initialization process. Generally, this pre-instantiation is desirable, because errors in the
        configuration or surrounding environment are discovered immediately, as opposed to hours or even
        days later. When this behavior is not desirable, you can prevent pre-instantiation of a singleton bean by
        marking the bean definition as lazy-initialized. A lazy-initialized bean tells the IoC container to create a
        bean instance when it is first requested, rather than at startup.
        In XML, this behavior is controlled by the lazy-init attribute on the <bean/> element;
        You can also control lazy-initialization at the container level by using the default-lazy-init attribute
        on the <beans/> element;

        However, when a lazy-initialized bean is a dependency of a singleton bean that is not lazy-initialized,
        the ApplicationContext creates the lazy-initialized bean at startup, because it must satisfy the
        singletonâ€™s dependencies. The lazy-initialized bean is injected into a singleton bean elsewhere that is
        not lazy-initialized
    -->

    <bean id="default.lazyBean" class="section4_Dependencies.material.LazyBean" init-method="init" lazy-init="default"/>
    <bean id="lazy.lazyBean" class="section4_Dependencies.material.LazyBean" init-method="init" lazy-init="true"/>
    <bean id="not.lazyBean" class="section4_Dependencies.material.LazyBean" init-method="init" lazy-init="false"/>

</beans>